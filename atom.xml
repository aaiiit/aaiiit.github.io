<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brainleak]]></title>
  <link href="http://aaiiit.github.io/atom.xml" rel="self"/>
  <link href="http://aaiiit.github.io/"/>
  <updated>2015-01-22T18:20:42+01:00</updated>
  <id>http://aaiiit.github.io/</id>
  <author>
    <name><![CDATA[Mestdagh Tom]]></name>
    <email><![CDATA[mestdagh.tom@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Detect a USB Device on Linux With Udev]]></title>
    <link href="http://aaiiit.github.io/blog/2015/01/22/detect-a-usb-device-on-linux-with-udev/"/>
    <updated>2015-01-22T17:02:34+01:00</updated>
    <id>http://aaiiit.github.io/blog/2015/01/22/detect-a-usb-device-on-linux-with-udev</id>
    <content type="html"><![CDATA[<p>I needed a way to start an application when a device is
connected to the RPi.  In this example the barcodescanner
software should start when we connect the scanner.
Adding a udev rule should do the trick.</p>

<ul>
<li>First get the ID of the specific device</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">lsusb

    Bus <span class="m">001</span> Device 006: ID 05f9:2214 PSC Scanning, Inc. 
    Bus <span class="m">001</span> Device 004: ID 0a5f:0015 Zebra</code></pre></div>


<ul>
<li><p>Add the rules file located in /etc/udev/rules.d/,
for instance /etc/udev/rules.d/85-custom_usb_device_rules.rules</p></li>
<li><p>Add the rule to detect scanner and start software, the idVendor
and idProduct point to the ID we got from lsusb</p></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">ACTION</span><span class="o">==</span><span class="s2">&quot;add&quot;</span>,SUBSYSTEM<span class="o">==</span><span class="s2">&quot;usb&quot;</span>,ATTR<span class="o">{</span>idVendor<span class="o">}==</span><span class="s2">&quot;05f9&quot;</span>,
    ATTR<span class="o">{</span>idProduct<span class="o">}==</span><span class="s2">&quot;2214&quot;</span>,RUN+<span class="o">=</span><span class="s2">&quot;/etc/init.d/barcodescanner start&quot;</span></code></pre></div>


<ul>
<li>Reload the rules or reboot</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">udevadm control --reload-rules</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating My Capistrano Deployment Process for Rails 4]]></title>
    <link href="http://aaiiit.github.io/blog/2014/12/27/updating-my-capistrano-deployment-process-for-rails-4/"/>
    <updated>2014-12-27T15:14:37+01:00</updated>
    <id>http://aaiiit.github.io/blog/2014/12/27/updating-my-capistrano-deployment-process-for-rails-4</id>
    <content type="html"><![CDATA[<p>Now that I&rsquo;m getting at the point that I can update the different rails apps regularly,
it&rsquo;s about time to update my deployment process.<br/>
After every deploy I have to :</p>

<ul>
<li>Login to the host</li>
<li>Navigate to app/current directory</li>
<li>Run bundle</li>
<li>Run rake assets:precompile</li>
<li>Restart application server</li>
</ul>


<p>Fuck this!  Let&rsquo;s update.</p>

<ul>
<li>Add capistrano gems to Gemfile</li>
</ul>


<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
      <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span><span class="s1">&#39;3.2.1&#39;</span>
      <span class="n">gem</span> <span class="s1">&#39;capistrano-rvm&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
      <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span>
      <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span>
    <span class="k">end</span></code></pre></div>


<ul>
<li>Require specific files in Capfile</li>
</ul>


<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Load DSL and Setup Up Stages</span>
    <span class="nb">require</span> <span class="s1">&#39;capistrano/setup&#39;</span>

    <span class="c1"># Includes default deployment tasks</span>
    <span class="nb">require</span> <span class="s1">&#39;capistrano/rvm&#39;</span>
    <span class="nb">require</span> <span class="s1">&#39;capistrano/deploy&#39;</span>
    <span class="nb">require</span> <span class="s1">&#39;capistrano/rails&#39;</span>
    <span class="nb">require</span> <span class="s1">&#39;capistrano/rails/migrations&#39;</span>

    <span class="c1"># Loads custom tasks from `lib/capistrano/tasks&#39; if you have any defined.</span>
    <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span></code></pre></div>


<ul>
<li>Update deploy.rb</li>
</ul>


<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># config valid only for Capistrano 3.1</span>
    <span class="n">lock</span> <span class="s1">&#39;3.2.1&#39;</span>

    <span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;shops&#39;</span>
    <span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@dev.suwappu.net:suwappu/shops.git&#39;</span>

    <span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/nfs/apps/shops_production&#39;</span>

    <span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span>
      <span class="ss">forward_agent</span><span class="p">:</span> <span class="kp">true</span>
    <span class="p">}</span>

    <span class="n">set</span> <span class="ss">:pty</span><span class="p">,</span> <span class="kp">true</span>
    <span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle</span>
<span class="sx">      public/system}</span>

    <span class="c1"># Default value for default_env is {}</span>
    <span class="c1"># set :default_env, { path: &quot;/opt/rbenv/shims:$PATH&quot; }</span>

    <span class="n">set</span> <span class="ss">:rvm_type</span><span class="p">,</span> <span class="ss">:user</span>                     <span class="c1"># Defaults to: :auto</span>
    <span class="n">set</span> <span class="ss">:rvm_ruby_version</span><span class="p">,</span> <span class="s1">&#39;rbx-2.2.10&#39;</span>      <span class="c1"># Defaults to: &#39;default&#39;</span>
    <span class="n">set</span> <span class="ss">:rvm_custom_path</span><span class="p">,</span> <span class="s1">&#39;/usr/local/rvm&#39;</span>  <span class="c1"># only needed if not detected</span>

    <span class="n">stage</span> <span class="o">=</span> <span class="s2">&quot;production&quot;</span>
    <span class="n">shared_path</span> <span class="o">=</span> <span class="s2">&quot;/nfs/apps/shops_production/shared&quot;</span>
    <span class="n">puma_sock</span>    <span class="o">=</span> <span class="s2">&quot;unix://</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/sockets/puma.sock&quot;</span>
    <span class="n">puma_control</span> <span class="o">=</span> <span class="s2">&quot;unix://</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/sockets/pumactl.sock&quot;</span>
    <span class="n">puma_state</span>   <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/sockets/puma.state&quot;</span>
    <span class="n">puma_log</span>     <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/log/puma-</span><span class="si">#{</span><span class="n">stage</span><span class="si">}</span><span class="s2">.log&quot;</span>

    <span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
      <span class="n">desc</span> <span class="s1">&#39;Restart application&#39;</span>
      <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
        <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
          <span class="c1"># Your restart mechanism here, for example:</span>
          <span class="c1"># execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)</span>
          <span class="n">execute</span> <span class="s1">&#39;sudo /etc/init.d/puma restart&#39;</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">desc</span> <span class="s1">&#39;Resetting DB &amp; seeding&#39;</span>
      <span class="n">task</span> <span class="ss">:db_reset_and_seed</span> <span class="k">do</span>
        <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
          <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
            <span class="n">with</span> <span class="ss">rails_env</span><span class="p">:</span> <span class="ss">:production</span> <span class="k">do</span>
              <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;db:migrate:reset&quot;</span>
              <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;db:seed&quot;</span>
            <span class="k">end</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>

      <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:clear_cache</span> <span class="k">do</span>
        <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span></code></pre></div>


<p>Application server is not restarted yet.<br/>
<del>I&rsquo;ll give it some time to fix, but if it takes to long I&rsquo;ll just leave it open.</del></p>

<p>It was because of the very weak bootscript for the application server.
Changed it to :</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> -n <span class="s2">&quot;Restarting Puma server for $APP...&quot;</span>
    su - <span class="nv">$USR</span> -c <span class="s2">&quot;kill -s SIGTERM `cat $PID`&quot;</span>
    rm /nfs/apps/shops_production/shared/tmp/pids/*
    su - <span class="nv">$USR</span> -c <span class="s2">&quot;cd $APP/current ; bundle exec thin start -p 8080 -e $ENV -P $PID -d&quot;</span>
    <span class="nb">echo</span> <span class="s2">&quot;[ Done ]&quot;</span></code></pre></div>


<p>After separating web and zmq-backend we&rsquo;ll be using a different application server.
Then I&rsquo;ll look to upgrade the application bootscript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a VPN Client to Suwappu Network]]></title>
    <link href="http://aaiiit.github.io/blog/2014/09/24/adding-a-vpn-client-to-suwappu-network/"/>
    <updated>2014-09-24T13:51:31+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/09/24/adding-a-vpn-client-to-suwappu-network</id>
    <content type="html"><![CDATA[<p>To add an OpenVPN client to the Suwappu network, you need to do the following :</p>

<ul>
<li>Login to openvpn.suwappu.net</li>
<li>cd /etc/openvpn/easy-rsa</li>
<li>source ./vars</li>
<li>/etc/openvpn/easy-rsa/suwappu_host_keys <client-name></li>
<li>Logout OpenVPN server</li>
<li>cp /var/lib/vz/private/1003/tmp/<client-name>.tar.gz /vservers/containers/private/1012/home/tom/</li>
<li>knife bootstrap <client-name> -r &lsquo;suwappu::openvpn-client&rsquo;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Custom Protocol Handler to Iceweasel]]></title>
    <link href="http://aaiiit.github.io/blog/2014/09/24/add-custom-protocol-handler-to-iceweasel/"/>
    <updated>2014-09-24T12:00:45+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/09/24/add-custom-protocol-handler-to-iceweasel</id>
    <content type="html"><![CDATA[<p>You may try to edit Firefox/Iceweasel configuration via about:config:</p>

<ul>
<li>network.protocol-handler.expose.komodo: true (This protocol should be handled either by the browser or by an external application)</li>
<li>network.protocol-handler.external.komodo: true (This protocol should be handled by an external application)</li>
<li>network.protocol-handler.app.komodo: python /path/to/my/script.py (Path to a program to handle the request)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVPN Server Setup]]></title>
    <link href="http://aaiiit.github.io/blog/2014/09/05/openvpn-server-setup/"/>
    <updated>2014-09-05T11:37:34+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/09/05/openvpn-server-setup</id>
    <content type="html"><![CDATA[<p>See <a href="https://www.intovps.com/client/knowledgebase/19/How-to-install-and-configure-OpenVPN.html">https://www.intovps.com/client/knowledgebase/19/How-to-install-and-configure-OpenVPN.html</a></p>

<p>Do not forget to enable client-to-client communication in server.conf!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Proxmox on Hetzner Server]]></title>
    <link href="http://aaiiit.github.io/blog/2014/09/03/install-proxmox-on-hetzner-server/"/>
    <updated>2014-09-03T13:10:15+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/09/03/install-proxmox-on-hetzner-server</id>
    <content type="html"><![CDATA[<ul>
<li>Boot in rescue mode</li>
<li>Set root passwd</li>
<li>Install image</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">installimage</code></pre></div>


<ul>
<li><p>Configure partitions</p>

<p>Use LVM so that we can take snapshots and live dumps.</p></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">Filesystem                Size  Used Avail Use% Mounted on
udev                       10M     <span class="m">0</span>   10M   0% /dev
tmpfs                     1.2G  340K  1.2G   1% /run
/dev/mapper/vg0-root       50G  3.0G   44G   7% /
tmpfs                     5.0M     <span class="m">0</span>  5.0M   0% /run/lock
tmpfs                     3.6G  3.1M  3.6G   1% /run/shm
/dev/md0                  496M   40M  430M   9% /boot
/dev/mapper/vg0-tmp       5.0G   33M  5.0G   1% /tmp
/dev/mapper/vg0-home       20G   33M   20G   1% /home
/dev/mapper/vg0-backup     75G   33M   75G   1% /backup
/dev/mapper/vg0-vservers  500G  1.2G  499G   1% /vservers</code></pre></div>


<ul>
<li>Reboot</li>
<li>Install suwappu::base</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap &lt;hw-node&gt; -r <span class="s1">&#39;suwappu::base&#39;</span></code></pre></div>


<ul>
<li>Add ssh-key to root and user</li>
<li>Install sudo and configure for user</li>
<li>Login to <a href="https://hw-node:8006">https://hw-node:8006</a></li>
<li><p>Add storage</p>

<p>Datacenter -> Storage add /vservers</p>

<ul>
<li>backup</li>
<li>disk image</li>
<li>container</li>
</ul>
</li>
<li><p>Put in some containers</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install-appserver-internal]]></title>
    <link href="http://aaiiit.github.io/blog/2014/09/02/install-appserver-internal/"/>
    <updated>2014-09-02T09:41:55+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/09/02/install-appserver-internal</id>
    <content type="html"><![CDATA[<h2>Howto install an application server @ Suwappu</h2>

<ul>
<li>Add container to data bag openvz-instances hw-node</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife data bag edit openvz-instances hw-node -e vim</code></pre></div>


<ul>
<li>Create specified container on openvz hardware node</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap hw-node -r <span class="s1">&#39;suwappu::openvz-instances&#39;</span></code></pre></div>


<ul>
<li>Install base software that all containers need</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap container -r <span class="s1">&#39;suwappu::base&#39;</span></code></pre></div>


<ul>
<li><p>Configure node</p>

<p>node[&lsquo;app&rsquo;][&lsquo;name&rsquo;]</p></li>
<li><p>Install appserver</p></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap container -r <span class="s1">&#39;suwappu::appserver&#39;</span></code></pre></div>


<ul>
<li>Install correct ruby version</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">rvm install rbx-2.2.10</code></pre></div>


<ul>
<li>Capify application</li>
<li>Run bundle on server</li>
<li>Add SQL db to data bag sql-databases mysql-node</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife data bag edit sql-databases mysql-node -e vim</code></pre></div>


<ul>
<li>Create specified SQL DB</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap mysql-node -r <span class="s1">&#39;suwappu::sql-databases&#39;</span></code></pre></div>


<ul>
<li>Add reverse proxy to data bag nginx-reverse-proxies nginx-node</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife data bag edit nginx-reverse-proxies nginx-node -e vim</code></pre></div>


<ul>
<li>Create specified Reverse Proxy</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">knife bootstrap nginx-node -r <span class="s1">&#39;suwappu::nginx-reverse-proxies&#39;</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVZ Moving Containers]]></title>
    <link href="http://aaiiit.github.io/blog/2014/08/17/openvz-moving-containers/"/>
    <updated>2014-08-17T13:59:13+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/08/17/openvz-moving-containers</id>
    <content type="html"><![CDATA[<h2>OpenVZ moving containers</h2>

<p>When moving OpenVZ containers on the hdd to another location you have to do some other changes to :</p>

<ul>
<li>Edit /etc/vz/conf/<ctid>.conf and change private path to new location</li>
<li>Drop vzquota on container
  vzquota drop <ctid></li>
</ul>


<p>  Then you probably should reinitialize quota and turn it back on again,
  but that&rsquo;s for another time.  Need to look into it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internal Storage]]></title>
    <link href="http://aaiiit.github.io/blog/2014/08/03/internal-storage/"/>
    <updated>2014-08-03T13:59:13+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/08/03/internal-storage</id>
    <content type="html"><![CDATA[<h2>Storage server</h2>

<p>Using a Raspberry PI model B with external hdd&rsquo;s as a NAS.
Device is identified as &lsquo;storage&rsquo; on the network.
HDD&rsquo;s are mounted in /mnt.  Right now only data-1 is mounted.
Clients use /data-1 as mountpoint.</p>

<h1>NFS mounts</h1>

<p>storage:/mnt/data-1 /data-1 nfs defaults    0   0</p>

<h2>TODO</h2>

<ul>
<li>Setup rights so that clients can write to it</li>
<li><p>Create bootscript so that all necessary services are started</p>

<p>  After booting storage NFS can not be started because rpcbind
  is not started.  First start rpcbind then nfs-common and nfs-kernel</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Books to Read]]></title>
    <link href="http://aaiiit.github.io/blog/2014/08/03/books-to-read/"/>
    <updated>2014-08-03T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/08/03/books-to-read</id>
    <content type="html"><![CDATA[<ul>
<li>The Banker&rsquo;s Clothes</li>
<li>The Housekeeper and the Professor</li>
<li>The Circle</li>
<li>Oil on the Brain: Adventures from the Pump to the Pipeline</li>
<li><p>The Quest [Daniel Yergin]</p>

<p>  Read first part it.  Very interesting.
  Puts current crisis in perspective.</p></li>
<li>The Goal</li>
<li>Grand Pursuit [Sylvia Nasar]</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 Engines Test]]></title>
    <link href="http://aaiiit.github.io/blog/2014/06/23/rails4-engines-test/"/>
    <updated>2014-06-23T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/06/23/rails4-engines-test</id>
    <content type="html"><![CDATA[<p>Testing is broken out of the box!
This is how you fix it :</p>

<p>test/test_helper.rb</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Configure Rails Environment</span>
<span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>

<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../dummy/config/environment.rb&quot;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
<span class="nb">require</span> <span class="s2">&quot;rails/test_help&quot;</span>

<span class="no">Rails</span><span class="o">.</span><span class="n">backtrace_cleaner</span><span class="o">.</span><span class="n">remove_silencers!</span>

<span class="c1"># Load support files</span>
<span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="s2">/support/**/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span> <span class="p">}</span>

<span class="c1"># Load fixtures from the engine</span>
<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../fixtures&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="n">fixtures</span> <span class="ss">:all</span>
<span class="k">end</span>

<span class="c1">#fixes other problems with controller tests (url helpers)</span>
<span class="k">class</span> <span class="nc">ActionController</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="n">setup</span> <span class="k">do</span>
    <span class="vi">@routes</span> <span class="o">=</span> <span class="no">Users</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">routes</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Fails on Bootstrapping the First Time]]></title>
    <link href="http://aaiiit.github.io/blog/2014/06/17/chef-first-run-fails/"/>
    <updated>2014-06-17T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/06/17/chef-first-run-fails</id>
    <content type="html"><![CDATA[<p>= Problem</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">shops.suwappu.net Installing Chef Client...
shops.suwappu.net --2014-06-17 10:12:40--
https://www.opscode.com/chef/install.sh
shops.suwappu.net Resolving www.opscode.com <span class="o">(</span>www.opscode.com<span class="o">)</span>... 184.106.28.90
shops.suwappu.net Connecting to www.opscode.com
<span class="o">(</span>www.opscode.com<span class="o">)</span><span class="p">|</span>184.106.28.90<span class="p">|</span>:443... connected.
shops.suwappu.net ERROR: The certificate of <span class="sb">`</span>www.opscode.com<span class="err">&#39;</span> is not trusted.
shops.suwappu.net Starting first Chef Client run...
shops.suwappu.net bash: line 85: chef-client: <span class="nb">command </span>not found
<span class="o">[</span>master<span class="o">][</span>/Code/suwappu/chef-resto/chef-repo-new<span class="o">]</span> librarian-chef</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using SSO]]></title>
    <link href="http://aaiiit.github.io/blog/2014/06/13/using-sso/"/>
    <updated>2014-06-13T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/06/13/using-sso</id>
    <content type="html"><![CDATA[<p>These are some notes for the internal SSO Provider.</p>

<ul>
<li>Add before_filter :sign_in to actions that need to be secured</li>
<li>Use current_user to get to the signed in User</li>
<li><p>Add Omniauth initializer</p></li>
<li><p>Something else</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 JS Compress]]></title>
    <link href="http://aaiiit.github.io/blog/2014/06/01/rails-4-js-compress/"/>
    <updated>2014-06-01T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/06/01/rails-4-js-compress</id>
    <content type="html"><![CDATA[<p><a href="http://blog.berylliumwork.com/2013/07/tips-on-rails-4-assets-compression-with.html">http://blog.berylliumwork.com/2013/07/tips-on-rails-4-assets-compression-with.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVZ Container TUN/TAP]]></title>
    <link href="http://aaiiit.github.io/blog/2014/06/01/openvz-container-tun-tap/"/>
    <updated>2014-06-01T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/06/01/openvz-container-tun-tap</id>
    <content type="html"><![CDATA[<p>While trying to use an OpenVZ container as an OpenVPN client,
it seemed the container could not create the TUN device.</p>

<p>See
<a href="https://openvz.org/VPN_via_the_TUN/TAP_device">https://openvz.org/VPN_via_the_TUN/TAP_device</a></p>

<p>OpenVZ containers have no TUN/TAP device.
It is possible to grant the container access to tun/tap by doing :</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">CTID</span><span class="o">=</span>101
  vzctl <span class="nb">set</span> <span class="nv">$CTID</span> --devnodes net/tun:rw --save
  vzctl <span class="nb">set</span> <span class="nv">$CTID</span> --devices c:10:200:rw --save
  vzctl <span class="nb">set</span> <span class="nv">$CTID</span> --capability net_admin:on --save
  vzctl <span class="nb">exec</span> <span class="nv">$CTID</span> mkdir -p /dev/net
  vzctl <span class="nb">exec</span> <span class="nv">$CTID</span> mknod /dev/net/tun c <span class="m">10</span> 200
  vzctl <span class="nb">exec</span> <span class="nv">$CTID</span> chmod <span class="m">600</span> /dev/net/tun</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVPN]]></title>
    <link href="http://aaiiit.github.io/blog/2014/05/31/openvpn/"/>
    <updated>2014-05-31T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/05/31/openvpn</id>
    <content type="html"><![CDATA[<p>Started using <a href="https://www.gitlab.com">Gitlab</a> today.
It&rsquo;s like running Github for internal purposes.</p>

<ul>
<li><p>Followed installation instruction from
<a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md">https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md</a></p></li>
<li><p>Edit gitlab-shell/config.yml and gitlab/config/gitlab.yml and change
host config.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab]]></title>
    <link href="http://aaiiit.github.io/blog/2014/05/31/gitlab/"/>
    <updated>2014-05-31T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/05/31/gitlab</id>
    <content type="html"><![CDATA[<p>Started using <a href="https://www.gitlab.com">Gitlab</a> today.
It&rsquo;s like running Github for internal purposes.</p>

<ul>
<li><p>Followed installation instruction from
<a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md">https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/installation.md</a></p></li>
<li><p>Edit gitlab-shell/config.yml and gitlab/config/gitlab.yml and change
host config.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ZeroMQ]]></title>
    <link href="http://aaiiit.github.io/blog/2014/05/30/using-zeromq/"/>
    <updated>2014-05-30T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/05/30/using-zeromq</id>
    <content type="html"><![CDATA[<p>Install through Chef <a href="https://github.com/plu/zeromq-cookbook">zeromq cookbook</a></p>

<p>This cookbook has been added to Role zeromq</p>

<h1>ZeroMQ Version</h1>

<p>Use this C-code to get the version of ZeroMq.</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;</span>
  <span class="cp">#include &quot;zmq.h&quot;</span>

  <span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">major</span><span class="p">,</span> <span class="n">minor</span><span class="p">,</span> <span class="n">patch</span><span class="p">;</span>
    <span class="n">zmq_version</span><span class="p">(</span><span class="o">&amp;</span><span class="n">major</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">minor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">patch</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Installed ZeroMQ version: %d.%d.%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">major</span><span class="p">,</span> <span class="n">minor</span><span class="p">,</span> <span class="n">patch</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span></code></pre></div>


<p>Compile and run:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gcc -lzmq zeromq-verion.c -o zeromq-version
  ./zeromq-version
  Installed ZeroMQ version: 3.2.4</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVZ Problem : Quota on Syscall]]></title>
    <link href="http://aaiiit.github.io/blog/2014/05/30/openvz-quota-on-syscall/"/>
    <updated>2014-05-30T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/05/30/openvz-quota-on-syscall</id>
    <content type="html"><![CDATA[<p>From :
<a href="http://serverguru.blogspot.be/2009/09/vzquota-error-quota-on-syscall-for-id.html">http://serverguru.blogspot.be/2009/09/vzquota-error-quota-on-syscall-for-id.html</a></p>

<p>Reason: The vzquota of that particular vps still running in the server. So you
have to drop the quota before applying the new changes.</p>

<p>remove /var/vzquota/quota. and drop the particular quota</p>

<ul>
<li>rm /var/vzquota/quota.110</li>
<li>vzquota drop 110</li>
<li>vzctl start 110</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Librarian Chef]]></title>
    <link href="http://aaiiit.github.io/blog/2014/05/30/librarian-chef/"/>
    <updated>2014-05-30T00:00:00+02:00</updated>
    <id>http://aaiiit.github.io/blog/2014/05/30/librarian-chef</id>
    <content type="html"><![CDATA[<p>Chef Repo should have Cheffile.<br/>
Seems to work like bundler and stuff.</p>

<p>Add needed cookbooks to file</p>

<p>  cookbook &lsquo;zeromq&rsquo;,:git => &lsquo;<a href="https://github.com/plu/zeromq-cookbook">https://github.com/plu/zeromq-cookbook</a>&rsquo;</p>

<p>Run librarian-chef install to install new cookbooks</p>

<h1>Roles</h1>

<ul>
<li><p>base</p>

<ul>
<li>add deployer user with ssh key</li>
<li>apt-get update</li>
</ul>
</li>
<li><p>zeromq</p>

<ul>
<li>install zeromq</li>
</ul>
</li>
<li><p>ruby-zeromq</p>

<ul>
<li>install ruby (Rubinius 2.2.6)</li>
<li>install Ruby zmq library</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
